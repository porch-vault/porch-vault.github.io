<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Porch Vault</title>
    <link>https://colorlessean.github.io/post/</link>
    <description>Recent content in Posts on Porch Vault</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© PorchVault 2021</copyright>
    <lastBuildDate>Sat, 06 Mar 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://colorlessean.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mechanical Fabrication</title>
      <link>https://colorlessean.github.io/post/mechfab/</link>
      <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://colorlessean.github.io/post/mechfab/</guid>
      <description>With the arrival of the wood from Home Depot, construction of the enclosure could begin. Cuts were planned out for the outer frame, with much wood left over for the lid or as emergency extra. There were many defects with the wood (warping, twisting, and splitting to name a few), but due to the project timeline, concessions had to be made.
After initial cuts, pilot holes were drilled to prevent the pieces from splitting and the 4 main panels were assembled using #6 x 2” wood screws.</description>
    </item>
    
    <item>
      <title>Database Schema</title>
      <link>https://colorlessean.github.io/post/databaseschema/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://colorlessean.github.io/post/databaseschema/</guid>
      <description>Database Technology The database is created using SQLite3. Given that the project is an MVP it seemed suitable to go with the ease of use and size of a SQLite database.
Split Similar to the APIs two halves of the database are kept completely separate. The product and authorization. The authorization contains one table. With the product containing four tables.
Authorization The authorization database is used specifically to hold the clients login information.</description>
    </item>
    
    <item>
      <title>API Adjustments</title>
      <link>https://colorlessean.github.io/post/apiadjustments/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://colorlessean.github.io/post/apiadjustments/</guid>
      <description>During the creation of the chrome extension a few issues have arisen that are worth mentioning.
The device page for individual devices are meant to display a list of the delivery PINs that are associated with the device. In the original API schema it had been somewhat assumed that the device endpoint would be able to handle this type of request. In the actual implementation however it would be putting unfitting to put such logic in the device endpoint.</description>
    </item>
    
    <item>
      <title>Product API</title>
      <link>https://colorlessean.github.io/post/productapi/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://colorlessean.github.io/post/productapi/</guid>
      <description>Purpose The product API is the second component of the back-end service. It is responsible for all the business logic in the product.
Security Middleware The product API is a stateless API. In essence this means that the API will not remember if a client is signed in or not. It will simply take in any API request handle it the same way based on the payload and return immediately. In order to tell the API that a client is authorized to do what its requesting there needs to be a layer of security.</description>
    </item>
    
    <item>
      <title>React app to Chrome extension</title>
      <link>https://colorlessean.github.io/post/converting_react_to_chrome_ext/</link>
      <pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://colorlessean.github.io/post/converting_react_to_chrome_ext/</guid>
      <description>Converting a React App to a Chrome Extension Hello everyone! This blog post goes over the procedure we followed to convert our companion React app to a Chrome extension. The post follows the assumption that all Node/React dependencies have been installed and the developer is using a Linux environment.
 Add a .env file in the root directory of your React app. In this file, set the environment variable INLINE_RUNTIME_CHUNK=false. If this environment variable isn&amp;rsquo;t set, webpack will inline Javascript code in the HTML, which Chrome won&amp;rsquo;t allow for XSS security reasons.</description>
    </item>
    
    <item>
      <title>Email Notifications</title>
      <link>https://colorlessean.github.io/post/emailnotifications/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://colorlessean.github.io/post/emailnotifications/</guid>
      <description>Setting Up The Porch Vault Email account was set up to use as an automated email service. In order to set this up to do so two things needed to be done. First the gmail account needed to have outside applications access sending from the email account. The second was setting up an SMTP service on the back end server. Setting up the gmail permission was straightforward. Then setting up the SMTP service required setting up an email sending service on the backend of the web server.</description>
    </item>
    
    <item>
      <title>Mechanical Redesign</title>
      <link>https://colorlessean.github.io/post/mechredesign/</link>
      <pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://colorlessean.github.io/post/mechredesign/</guid>
      <description>The original design of the porch vault enclosure was using welded sheet metal. This would create a strong body and minimize the number of seams in the design. However, as the Ontario-wide January lockdown was enacted, the feasibility of this solution came into question. Heavy use of the University of Waterloo’s E5 student machine shop would be needed for the sheet metal components, and as it would be closed for student use for an indeterminate amount of time, a simpler solution was required.</description>
    </item>
    
    <item>
      <title>Authorization API</title>
      <link>https://colorlessean.github.io/post/authapi/</link>
      <pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://colorlessean.github.io/post/authapi/</guid>
      <description>The first and arguably most important part of the Back-End service is the authorization API.
Purpose The authorization API is built to handle authorizing clients. Clients can be the device or the user of the chrome extension. To the authorization service there really is no difference between the two. The authorization API is there to take in a client name and password. It then returns the client a JWT. The JWT is used to ensure that the client can secure its connection with the product API allowing the product API to remain stateless.</description>
    </item>
    
    <item>
      <title>First Post</title>
      <link>https://colorlessean.github.io/post/firstpost/</link>
      <pubDate>Mon, 11 Jan 2021 20:23:37 -0600</pubDate>
      
      <guid>https://colorlessean.github.io/post/firstpost/</guid>
      <description>This is the first post in the blog website&amp;hellip;
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description>
    </item>
    
    <item>
      <title>Progress</title>
      <link>https://colorlessean.github.io/post/progress/</link>
      <pubDate>Mon, 11 Jan 2021 20:23:37 -0600</pubDate>
      
      <guid>https://colorlessean.github.io/post/progress/</guid>
      <description>This is a bogus blog post to have as filler for page testing.
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description>
    </item>
    
  </channel>
</rss>